/*!
 * Conceivilize File Transfer Online Lib
 * @copyright 2022-2025 Supratik Chatterjee
 * @license AGPL
 */
function print(e){let t=document.getElementById("output"),i=document.createElement("span");i.style.display="block",i.innerText=e,t.appendChild(i)}class WSUploader{constructor(e,t){this.ws_socket=new WebSocket("{{ws_server_url}}"),this.ws_socket.onmessage=function(e){let t=e.data;"1"==t?this.ws_uploader.upload_part(this.ws_uploader.current_part+1):"0"==t&&print("Complete")},this.ws_socket.onopen=function(e){this.ws_uploader.is_open=!0},this.transfer_bucket_capacity=e,this.x=t,this.max_part_size=e-t.length,this.current_file=null,this.current_part=null,this.total_parts=null,this.is_open=!1,this.ws_socket.ws_uploader=this}upload_part(e=0){this.current_part=e,console.log("Uploading part : ",e);let t=new Blob([this.x,this.current_file.slice(e*this.max_part_size,(e+1)*this.max_part_size)]);this.is_open?this.ws_socket.send(t):this.ws_socket.onopen=function(e){this.ws_uploader.is_open=!0,this.ws_uploader.upload_part()}}upload(e){this.current_file=e,this.current_part=0,this.total_parts=Math.trunc(e.size/this.max_part_size),this.upload_part()}}class FileUploader{constructor(){this.files=[],this.is_working=!1,this.zipper=new JSZip}upload(e){let t=this.files[e],i=this;console.log("Uploading : ",t.name);let s={name:t.name,last_modified:t.lastModified,size:t.size,type:t.type};fetch("/store_details",{method:"POST",headers:{"Content-Type":"application/json"},referrerPolicy:"no-referrer",body:JSON.stringify(s)}).then((s=>s.json().then((s=>{new WSUploader(s.transfer_bucket_capacity,s.x).upload(t),e<i.files.length-1&&i.upload(e+1)}))))}zip(e){if(e>=this.files.length-1)return this.zipper.generateAsync({type:"blob",compression:"deflate"}).then((e=>{e.name="conception"+Date()+".zip",e.lastModified=+new Date,console.log(e.type),this.upload(e)})),void(this.working=!1);let t=this.files[e],i=new FileReader;i.onload=function(i){let s=this.result,n=FileUploader.instance;n.zipper.file(t.name,s),n.zip(e+1)},print("zipping "+(e+1)+"/"+this.files.length),console.log(t),i.readAsArrayBuffer(t)}trigger_zipping(){if(!this.is_working)return new Promise((e=>(this.zip(0),e())))}trigger_upload(){if(!this.is_working)return new Promise((e=>(this.upload(0),e())))}static queue_files(e){let t=FileUploader.instance;for(let i=0;i<e.files.length;i++)t.files.push(e.files[i]);t.trigger_upload()}}FileUploader.instance=new FileUploader;