/*!
 * Web RTC Online API library
 * @copyright 2022-2032 Supratik Chatterjee
 * @license AGPL
 */
function RtcEntityConnection(n,t,e){this.rtcConf=null,this.username=null,this.wsConf=null,this.wsConn=null,RtcEntityConnection.prototype.onWsOpen=function(n){console.warn("onWsOpen not overridden"),console.log(n)},RtcEntityConnection.prototype.onWsErr=function(n){console.warn("onWsErr not overridden"),console.error(new Error("Ran into an error in the WebSocket connection",n))},RtcEntityConnection.prototype.onWsMsg=function(n){console.warn("onWsMsg not overridden"),console.log(n)},RtcEntityConnection.prototype.connect=function(n){const t=new RTCPeerConnection(RtcEntityConnection.rtc_conf);t.onicecandidate=function handleIceCandidate(t){t.candidate&&RtcEntityConnection.loopback({type:"new-ice-candidate",target:n,candidate:t.candidate})},t.oniceconnectionstatechange=function handleIceConnectionStateChange(n){switch(log("*** ICE connection state changed to "+t.iceConnectionState),t.iceConnectionState){case"closed":case"failed":case"disconnected":t.ontrack=null,t.onicecandidate=null,t.oniceconnectionstatechange=null,t.onsignalingstatechange=null,t.onicegatheringstatechange=null,t.onnegotiationneeded=null,t.getTransceivers().forEach(n=>{n.stop()}),t.close(),t=null}},t.onicegatheringstatechange=function handleIceGatheringStateChange(n){log("ICE gathering state changed to: "+t.iceGatheringState)},t.onsignalingstatechange=function handleIceSignalingStateChange(n){switch(log("WebRTC signaling state changed to: "+t.signalingState),t.signalingState){case"closed":closeVideoCall()}},t.onnegotiationneeded=async function handleIceNegotiationNeeded(){try{const e=await t.createOffer();if("stable"!=t.signalingState)return;await t.setLocalDescription(e),RtcEntityConnection.loopback({name:myUsername,target:n,type:"video-offer",sdp:t.localDescription})}catch(n){console.error(n)}},t.ontrack=function trackIce(n){}},this.username=n,this.wsConf=t,this.rtcConf=e,null==this.wsConn&&(this.wsConn="proto"in t?new WebSocket(t.url,t.proto):new WebSocket(t.url),this.wsConn.onopen=function(n){RtcEntityConnection.onWsOpen(n)},this.wsConn.onerror=function(n){RtcEntityConnection.onWsErr(n)},this.wsConn.onmessage=function(n){RtcEntityConnection.onWsMsg(n)}),this.loopback=n=>{"object"==typeof n&&(n=JSON.stringify(n)),this.wsConn.send(n)}}console.log("Hola from the RTC library.");