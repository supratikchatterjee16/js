class RtcEntityConnection{rtcConf;username;wsConf;wsConn;static onWsOpen=function(evt){console.warn("onWsOpen not overridden");console.log(evt);};static onWsErr=function(evt){console.warn("onWsErr not overridden");console.error(new Error("Ran into an error in the WebSocket connection",evt));};static onWsMsg=function(evt){console.warn("onWsMsg not overridden");console.log(evt);}
constructor(username,wsConf,rtcConf){this.username=username;this.wsConf=wsConf;this.rtcConf=rtcConf;if(this.wsConn==null){this.wsConn=new WebSocket(wsConf.url);this.wsConn.onopen=function(evt){RtcEntityConnection.onWsOpen(evt);}
this.wsConn.onerror=function(evt){RtcEntityConnection.onWsErr(evt);}
this.wsConn.onmessage=function(evt){RtcEntityConnection.onWsMsg(evt);}}}
loopback(data){if(typeof data==='object')
data=JSON.stringify(data);this.wsConn.send(data);}
static connect(targetUsername){const peerConn=new RTCPeerConnection(RtcEntityConnection.rtc_conf);peerConn.onicecandidate=handleIceCandidate;peerConn.oniceconnectionstatechange=handleIceConnectionStateChange;peerConn.onicegatheringstatechange=handleIceGatheringStateChange;peerConn.onsignalingstatechange=handleIceSignalingStateChange;peerConn.onnegotiationneeded=handleIceNegotiationNeeded;peerConn.ontrack=trackIce;function handleIceCandidate(event){if(event.candidate)
RtcEntityConnection.loopback({type:"new-ice-candidate",target:targetUsername,candidate:event.candidate});}
function handleIceConnectionStateChange(event){log("*** ICE connection state changed to "+peerConn.iceConnectionState);switch(peerConn.iceConnectionState){case"closed":case"failed":case"disconnected":peerConn.ontrack=null;peerConn.onicecandidate=null;peerConn.oniceconnectionstatechange=null;peerConn.onsignalingstatechange=null;peerConn.onicegatheringstatechange=null;peerConn.onnegotiationneeded=null;peerConn.getTransceivers().forEach(transceiver=>{transceiver.stop();});peerConn.close();peerConn=null;break;}}
function handleIceGatheringStateChange(event){log("ICE gathering state changed to: "+peerConn.iceGatheringState);}
function handleIceSignalingStateChange(event){log("WebRTC signaling state changed to: "+peerConn.signalingState);switch(peerConn.signalingState){case"closed":closeVideoCall();break;}}
async function handleIceNegotiationNeeded(){try{const offer=await peerConn.createOffer();if(peerConn.signalingState!="stable"){return;}
await peerConn.setLocalDescription(offer);RtcEntityConnection.loopback({name:myUsername,target:targetUsername,type:"video-offer",sdp:peerConn.localDescription});}catch(err){console.error(err);};}
function trackIce(event){}}
}
console.log("Hola from the RTC library.");
